// <auto-generated />
using System;
using FinanceManagement.DOMAIN.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FinanceManagement.DOMAIN.Migrations
{
    [DbContext(typeof(FinanceDbContext))]
    [Migration("20240624105005_ChangedGUIDinProjecttable")]
    partial class ChangedGUIDinProjecttable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FinanceManagement.DATA.Models.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientEmailId")
                        .HasColumnType("text");

                    b.Property<string>("ClientLocation")
                        .HasColumnType("text");

                    b.Property<string>("ClientName")
                        .HasColumnType("text");

                    b.Property<string>("ClientProfile")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReferenceName")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("FinanceManagement.DATA.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<Guid?>("EmployeeId1")
                        .HasColumnType("uuid");

                    b.Property<string>("EmployeeStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectManagerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("RolesRoleId")
                        .HasColumnType("uuid");

                    b.Property<string>("SkillSets")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("RolesRoleId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("FinanceManagement.DATA.Models.EmployeeProjectsList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<Guid?>("EmployeeId1")
                        .HasColumnType("uuid");

                    b.Property<int>("ProjectBasePrice")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectId")
                        .HasColumnType("text");

                    b.Property<string>("ProjectType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("Projectid")
                        .HasColumnType("uuid");

                    b.Property<int>("TotalPrice")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("Projectid");

                    b.ToTable("EmployeeProjectsList");
                });

            modelBuilder.Entity("FinanceManagement.DATA.Models.Project", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ClientEmail")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.Property<string>("ProjectID")
                        .HasColumnType("text");

                    b.Property<string>("ProjectManager")
                        .HasColumnType("text");

                    b.Property<string>("ProjectName")
                        .HasColumnType("text");

                    b.Property<string>("ProjectRefId")
                        .HasColumnType("text");

                    b.Property<string>("ProjectType")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("TeamSize")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("FinanceManagement.DATA.Models.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("FinanceManagement.DATA.Models.TimeSheets", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovedBy")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("text");

                    b.Property<Guid?>("EmployeeId1")
                        .HasColumnType("uuid");

                    b.Property<decimal>("HoursWorked")
                        .HasColumnType("numeric");

                    b.Property<string>("ProjectId")
                        .HasColumnType("text");

                    b.Property<Guid?>("Projectid")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId1");

                    b.HasIndex("Projectid");

                    b.ToTable("TimeSheets");
                });

            modelBuilder.Entity("FinanceManagement.DATA.Models.Employee", b =>
                {
                    b.HasOne("FinanceManagement.DATA.Models.Employee", null)
                        .WithMany("ManagedEmployees")
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("FinanceManagement.DATA.Models.Role", "Roles")
                        .WithMany("Employees")
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Roles");
                });

            modelBuilder.Entity("FinanceManagement.DATA.Models.EmployeeProjectsList", b =>
                {
                    b.HasOne("FinanceManagement.DATA.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("FinanceManagement.DATA.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("Projectid");

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FinanceManagement.DATA.Models.Project", b =>
                {
                    b.HasOne("FinanceManagement.DATA.Models.Employee", null)
                        .WithMany("Projects")
                        .HasForeignKey("EmployeeId");
                });

            modelBuilder.Entity("FinanceManagement.DATA.Models.TimeSheets", b =>
                {
                    b.HasOne("FinanceManagement.DATA.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId1");

                    b.HasOne("FinanceManagement.DATA.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("Projectid");

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("FinanceManagement.DATA.Models.Employee", b =>
                {
                    b.Navigation("ManagedEmployees");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("FinanceManagement.DATA.Models.Role", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
